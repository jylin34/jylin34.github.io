<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://blog.jylin.dev/atom.xml" rel="self"/>
  
  <link href="https://blog.jylin.dev/"/>
  <updated>2025-10-24T23:40:58.209Z</updated>
  <id>https://blog.jylin.dev/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ns3-leo 安裝筆記</title>
    <link href="https://blog.jylin.dev/2025/10/19/ns3-leo-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/"/>
    <id>https://blog.jylin.dev/2025/10/19/ns3-leo-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</id>
    <published>2025-10-19T02:47:12.000Z</published>
    <updated>2025-10-24T23:40:58.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近在看低軌道衛星（LEO）相關的論文，要安裝個模擬器來實驗看看，因為之前安裝過 ns3，找到網路上有 <a href="https://gitlab.ibr.cs.tu-bs.de/tschuber/ns-3-leo">ns3-leo</a> 這個套件，想說就試試看，安裝過程中遇到各種問題踩了不少坑，這邊記錄一下。</p><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><h3 id="下載-ns-3-35"><a href="#下載-ns-3-35" class="headerlink" title="下載 ns-3.35"></a>下載 ns-3.35</h3><p>因為 ns3-leo 是 2020 的程式，還是使用 wscript，ns3 &gt;&#x3D; <a href="https://www.nsnam.org/releases/ns-3-36/">3.36</a> 後都是使用 cmake 代替 waf 了，所以這邊安裝 <a href="https://www.nsnam.org/releases/ns-3-35/">ns-3.35</a> 的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.nsnam.org/releases/ns-allinone-3.35.tar.bz2</span><br><span class="line">tar jxvf ns-allinone-3.35.tar.bz2</span><br></pre></td></tr></table></figure><h3 id="下載-ns3-leo"><a href="#下載-ns3-leo" class="headerlink" title="下載 ns3-leo"></a>下載 ns3-leo</h3><p>首先在 <code>src/</code> 底下下載 ns3-leo，並且把 folder 命名為 leo (根據 <a href="https://groups.google.com/g/ns-3-users/c/U-Vm4bDRbfQ/m/k2eKwWA8DgAJ">ns3 google forum</a>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ns-allinone-3.35/ns-3.35/src</span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.ibr.cs.tu-bs.de/tschuber/ns-3-leo.git</span><br><span class="line"><span class="built_in">mv</span> ns-3-leo leo</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><h3 id="安裝-編譯"><a href="#安裝-編譯" class="headerlink" title="安裝 (編譯)"></a>安裝 (編譯)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原本用 Python 3.13，但似乎沒有支援 waf 了，這邊 gpt 叫我用 python 3.11</span></span><br><span class="line">brew install python@3.11</span><br><span class="line">python3.11 -m venv .venv</span><br><span class="line"><span class="built_in">source</span> .venv/bin/activate</span><br><span class="line"></span><br><span class="line">./waf configure --enable-examples -d debug --disable-werror --disable-tests --disable-python</span><br><span class="line">./waf build</span><br></pre></td></tr></table></figure><p>然後就會開始遇到報錯 : )</p><h3 id="‘ns3-point-to-point-remote-channel-h’-file-not-found"><a href="#‘ns3-point-to-point-remote-channel-h’-file-not-found" class="headerlink" title="‘ns3&#x2F;point-to-point-remote-channel.h’ file not found"></a>‘ns3&#x2F;point-to-point-remote-channel.h’ file not found</h3><p><img src="https://i.imgur.com/gDeVCSZ.png" alt="alt text"></p><p>我這邊是依照<a href="https://blog.csdn.net/zoe2222226666/article/details/137089749">這篇文章</a>直接去 github 找到對應的檔案 clone 下來。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build/ns3</span><br><span class="line">wget https://raw.githubusercontent.com/nsnam/ns-3-dev-git/refs/heads/master/src/point-to-point/model/point-to-point-remote-channel.h</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../../src</span><br><span class="line">./waf build</span><br></pre></td></tr></table></figure><p>下載完後，再重新編譯一次，應該就可以看到下圖包含 leo 這個 module 了。<br><img src="https://i.imgur.com/kn0q8IN.png" alt="alt text"></p><h3 id="測試範例"><a href="#測試範例" class="headerlink" title="測試範例"></a>測試範例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> src/leo/examples</span><br></pre></td></tr></table></figure><p>可以看到他 module 內有三個 examples 可以讓我們測試。<br><img src="https://i.imgur.com/5Mntjse.png" alt="alt text"></p><p>但實際印出可執行的程式卻只有其中一個 example。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./waf list | grep leo</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uO7zT9x.png" alt="alt text"></p><p>一樣根據<a href="https://blog.csdn.net/zoe2222226666/article/details/137089749">這篇 csdn 文章</a>，原因是因為另外兩個 example 缺少 <code>epidemic-routing</code> module，導致沒有編譯這兩個 example，從 github 上找到舊版 source code，在 <code>src/</code> clone 下來再重新編譯一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rachit-iam/epidemic-routing.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">./waf configure --enable-examples -d debug --disable-werror --disable-tests --disable-python</span><br><span class="line">./waf build</span><br></pre></td></tr></table></figure><p>然後會遇到下一個錯誤。</p><h3 id="error-no-member-named-‘Default’-in-‘ns3-YansWifiPhyHelper"><a href="#error-no-member-named-‘Default’-in-‘ns3-YansWifiPhyHelper" class="headerlink" title="error: no member named ‘Default’ in ‘ns3::YansWifiPhyHelper"></a>error: no member named ‘Default’ in ‘ns3::YansWifiPhyHelper</h3><p><img src="https://i.imgur.com/uezqDJE.png" alt="alt text"></p><p>看<a href="https://blog.csdn.net/xihuanmadaima/article/details/121330684">這篇文章</a>的解法，要把 <code>YansWifiPhyHelper</code> 這個 class 的 function 改一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/epidemic-routing/examples</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 example 裡面的 YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default (); 改成以下</span></span><br><span class="line">YansWifiPhyHelper wifiPhy;</span><br><span class="line">wifiPhy.SetErrorRateModel (<span class="string">&quot;ns3::NistErrorRateModel&quot;</span>);</span><br></pre></td></tr></table></figure><p>然後再重新編譯一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/</span><br><span class="line">./waf build</span><br></pre></td></tr></table></figure><h3 id="msg-”Could-not-connect-callback-to-NodeList-ns3-TcpL4Protocol-SocketList-Tx”-0-000000000s-1-file-src-core-model-config-cc-line-925-libc-abi-terminating"><a href="#msg-”Could-not-connect-callback-to-NodeList-ns3-TcpL4Protocol-SocketList-Tx”-0-000000000s-1-file-src-core-model-config-cc-line-925-libc-abi-terminating" class="headerlink" title="msg&#x3D;”Could not connect callback to &#x2F;NodeList&#x2F;&#x2F;$ns3::TcpL4Protocol&#x2F;SocketList&#x2F;&#x2F;Tx”, +0.000000000s -1 file&#x3D;..&#x2F;src&#x2F;core&#x2F;model&#x2F;config.cc, line&#x3D;925 libc++abi: terminating"></a>msg&#x3D;”Could not connect callback to &#x2F;NodeList&#x2F;<em>&#x2F;$ns3::TcpL4Protocol&#x2F;SocketList&#x2F;</em>&#x2F;Tx”, +0.000000000s -1 file&#x3D;..&#x2F;src&#x2F;core&#x2F;model&#x2F;config.cc, line&#x3D;925 libc++abi: terminating</h3><p>接下來再重新 run 看看 leo 的三個 examples，<code>leo-delay</code>, <code>leo-orbit</code>都可以跑，但 <code>leo-bulk-send</code> 還是會出錯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./waf --run leo-bulk-send</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ejfSVKz.png" alt="alt text"><br>根據 <a href="https://groups.google.com/g/ns-3-users/c/JZjlaAV0EWc">google forum 大老</a>，把這幾行註解掉可以正常跑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim src/leo/examples/leo-bulk-send-example.cc</span><br><span class="line"></span><br><span class="line">161:   // Config::Connect (<span class="string">&quot;/NodeList/*/<span class="variable">$ns3</span>::TcpL4Protocol/SocketList/*/Tx&quot;</span>,</span><br><span class="line">162:   //    MakeCallback (&amp;EchoTxRx));</span><br><span class="line">163:   // Config::Connect (<span class="string">&quot;/NodeList/*/<span class="variable">$ns3</span>::TcpL4Protocol/SocketList/*/Rx&quot;</span>,</span><br><span class="line">164:   //    MakeCallback (&amp;EchoTxRx));</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="leo-bulk-send"><a href="#leo-bulk-send" class="headerlink" title="leo-bulk-send"></a>leo-bulk-send</h3><h3 id="leo-delay"><a href="#leo-delay" class="headerlink" title="leo-delay"></a>leo-delay</h3><h3 id="leo-orbit"><a href="#leo-orbit" class="headerlink" title="leo-orbit"></a>leo-orbit</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li>ns3-leo: <a href="https://gitlab.ibr.cs.tu-bs.de/tschuber/ns-3-leo">https://gitlab.ibr.cs.tu-bs.de/tschuber/ns-3-leo</a></li><li>NS3-LEO Google Forum: <a href="https://groups.google.com/g/ns-3-users/c/U-Vm4bDRbfQ/m/k2eKwWA8DgAJ">https://groups.google.com/g/ns-3-users/c/U-Vm4bDRbfQ/m/k2eKwWA8DgAJ</a></li><li>ns-3.36: <a href="https://www.nsnam.org/releases/ns-3-36/">https://www.nsnam.org/releases/ns-3-36/</a></li><li>ns-3.35: <a href="https://www.nsnam.org/releases/ns-3-35/">https://www.nsnam.org/releases/ns-3-35/</a></li><li>NS3学习笔记：安装、ns3-gym、ns3-leo、vscode联调 - <a href="https://blog.csdn.net/zoe2222226666/article/details/137089749">https://blog.csdn.net/zoe2222226666/article/details/137089749</a></li><li>Simulating LEO Satellite Network using ns-3 LEO Module Google Forum - <a href="https://www.projectguideline.com/simulating-leo-satellite-network-using-ns-3-leo-module/">https://www.projectguideline.com/simulating-leo-satellite-network-using-ns-3-leo-module/</a></li><li>NS3版本细节 - <a href="https://blog.csdn.net/xihuanmadaima/article/details/121330684">https://blog.csdn.net/xihuanmadaima/article/details/121330684</a></li><li>Error when executing leo-bulk-send-example.cc in Leo module Google Forum - <a href="https://groups.google.com/g/ns-3-users/c/JZjlaAV0EWc">https://groups.google.com/g/ns-3-users/c/JZjlaAV0EWc</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近在看低軌道衛星（LEO）相關的論文，要安裝個模擬器來實驗看看，因為之前安裝過 ns3，找到網路上有 &lt;a href=&quot;https://g</summary>
      
    
    
    
    
    <category term="研究所" scheme="https://blog.jylin.dev/tags/%E7%A0%94%E7%A9%B6%E6%89%80/"/>
    
    <category term="ns3" scheme="https://blog.jylin.dev/tags/ns3/"/>
    
  </entry>
  
  <entry>
    <title>2023 icpc 桃園站 心得</title>
    <link href="https://blog.jylin.dev/2023/10/22/2023_ICPC/"/>
    <id>https://blog.jylin.dev/2023/10/22/2023_ICPC/</id>
    <published>2023-10-21T16:45:34.000Z</published>
    <updated>2025-10-07T14:20:08.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今年靠著topc跟cpe，順利晉級icpc桃園站，這裡記錄一下第一次打icpc的心得。</p><h1 id="出發"><a href="#出發" class="headerlink" title="出發"></a>出發</h1><p>地點在桃園體育館，從中央到那大眾運輸需要搭公車到中壢站在轉乘台鐵到桃園站，接著步行或騎車，於是比賽當天一早七點就在學校等第一班公車了，大概花了一小時抵達。後來得知另一隊搭計程車在跟學校報帳，搭了600塊錢XD。</p><h1 id="比賽"><a href="#比賽" class="headerlink" title="比賽"></a>比賽</h1><p>比賽時間從9:30 ~ 14:30，<del>平常這時候大概在睡覺</del>，根據前幾年歷屆 通常最水兩題是第一題跟最後一題，所以我們就先開這兩題，看了記分板也發現大家都先解這幾題，</p><h2 id="M-簽到題-1-try"><a href="#M-簽到題-1-try" class="headerlink" title="M 簽到題, 1 try"></a>M 簽到題, 1 try</h2><h2 id="A-水題-5-try"><a href="#A-水題-5-try" class="headerlink" title="A 水題, 5 try"></a>A 水題, 5 try</h2><p>給至多1000位的數字，判斷是否被13整除；題目提到將該數字從右至左每三位輪流做加減法，得出的數字<code>ans</code>如果可以被13整除，則原數字也可以被13整除。 輸出<code>ans</code>的絕對值，以及yes &#x2F; no。</p><p>然後我們沒看到要取絕對值，吃了五個罰時…</p><h2 id="B-數學-5-try"><a href="#B-數學-5-try" class="headerlink" title="B 數學, 5 try"></a>B 數學, 5 try</h2><p>給一循還小數，找出該數值最簡分數。 一開始用python， 用內建 gcd 不知為啥一直吃re，後來改C++才ac。</p><h2 id="H-2-try"><a href="#H-2-try" class="headerlink" title="H , 2 try"></a>H , 2 try</h2><p>背包題，文獻+學宇解的，窩不會dp。</p><h2 id="D-模擬-1-try"><a href="#D-模擬-1-try" class="headerlink" title="D 模擬, 1 try"></a>D 模擬, 1 try</h2><p>給一飛機座位圖，<code>.</code>表示乘客，<code>V</code>表示帶有病毒的乘客，相鄰病毒的乘客需要隔離，輸出每位乘客要隔離的天數。 其實某種程度也算水題。</p><h2 id="F-模擬-3-try"><a href="#F-模擬-3-try" class="headerlink" title="F 模擬, 3 try"></a>F 模擬, 3 try</h2><p>給你很多個 task，每個 task 有所需時間跟單位時間罰款，每個 task 所要支付的總罰款為單位時間罰款乘上前面的總和時間，要重新排序所有 task 使得罰款總和最小；隊友(學宇)說最近程設專題剛好有遇到類似題目，就解了。</p><h2 id="C-線段樹-2-try"><a href="#C-線段樹-2-try" class="headerlink" title="C 線段樹, 2 try"></a>C 線段樹, 2 try</h2><p>給<code>n</code>個燈籠，每個燈籠用<code>si</code>跟<code>pi</code>來表示，<code>si</code>可為0(關) &#x2F; 1(開) &#x2F; -1(壞掉)，<code>pi</code>代表該燈籠原始分數。</p><p>給<code>m</code>個操作，有兩種操作:</p><ol><li><code>W l r</code>，將<code>[l, r]</code>區間的燈籠都reverse switch</li><li><code>C score</code>，將當前亮著的燈籠全部加上score分</li></ol><p>輸出最終所有燈籠的分數總合。(n &lt;&#x3D; 1e6, m &lt;&#x3D; 1e6)</p><p>解這題的時候剩下一小時，已經封版了，我們當時在60+名，所以必須要解掉這題才有牌，雖然知道是線段樹，但我們線段樹實作經驗不多，當下有點緊張。</p><p>最後用線段樹維護區間內亮著的燈籠個數，加上懶標跟壞掉的燈籠前處理，兩次ac，鬆了一口氣(還好有放模板)。</p><p>這題解完剩半小時，想說應該有機會銅牌了，就去吃了點東西，回來 稍微看了一下L跟J，但沒什麼想法。</p><h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><p>給你一個數字 N，你要分解成很多個數字並且總和是 N，問你最多可以分解成幾個數字，並且這些數字任取總和都不會是 9。</p><p>後來問其他隊，得知是構造題? 說實話，我到現在都還不是很確定構造題是怎樣的題目…</p><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p>這題花了十分鐘才搞懂題目的意思，給你一張只有一個起點跟一個終點帶有邊權跟點權的 DAG，問 critical path 長度多少，若 critical path 恰一個，則要輸出該 path，應該是跟拓樸排序有關，但n跟m只有50跟100，覺得怪怪的，隊友(文獻)說可能最外層要按照時間去遍歷?</p><h1 id="賽後"><a href="#賽後" class="headerlink" title="賽後"></a>賽後</h1><p>這次題目相比前幾年或ncpc，真的是非常平易近人，普遍都是7題以上，前十幾名都10題+…</p><p>最終51名&#x2F;7題拿下一個銅牌。</p><p>能改進的大概就是水題吃太多罰時…，前兩小時總共10個罰時，直接加200 penalty，要不是今年能解的題目數量變多，不然我們可能罰時就輸了。</p><p>另外還要恭喜中央另外兩隊都有晉級到asia play off，真的很強orz，我們隊就看明年能否拿個銀牌吧!</p><p>最後，真的感謝隊友過去一年的練習，感謝你們的carry :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今年靠著topc跟cpe，順利晉級icpc桃園站，這裡記錄一下第一次打icpc的心得。&lt;/p&gt;
&lt;h1 id=&quot;出發&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="icpc" scheme="https://blog.jylin.dev/tags/icpc/"/>
    
    <category term="大學" scheme="https://blog.jylin.dev/tags/%E5%A4%A7%E5%AD%B8/"/>
    
  </entry>
  
</feed>
